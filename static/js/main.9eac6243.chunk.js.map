{"version":3,"sources":["components/App/assets/converter.svg","components/App/assets/bmi.svg","components/App/assets/crypto.svg","components/App/assets/sattrack.svg","components/AppCard/AppCard.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","AppCard","props","Card","bg","style","width","borderRadius","margin","text","Img","variant","src","img","Body","Title","title","Button","href","activeClassName","App","Container","fluid","Row","Col","className","xs","sm","md","lg","converterImg","bmiImg","cryptoImg","satImg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,mMCG5B,SAASC,EAAQC,GAE5B,OACI,kBAACC,EAAA,EAAD,CAAMC,GAAG,OAAOC,MAAO,CAAEC,MAAO,QAAQC,aAAa,OAAOC,OAAO,QAAUC,KAAK,WAC1E,kBAACN,EAAA,EAAKO,IAAN,CAAUC,QAAQ,MAAMC,IAAKV,EAAMW,IAAKR,MAAO,CAACC,MAAM,MAAME,OAAO,UACnE,kBAACL,EAAA,EAAKW,KAAN,KACI,kBAACX,EAAA,EAAKY,MAAN,KAAab,EAAMc,OACnB,kBAACC,EAAA,EAAD,CAAQN,QAAQ,UAAUO,KAAMhB,EAAMgB,KAAMC,gBAAgB,UAA5D,S,4ECDL,SAASC,IACpB,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,wBAAIC,UAAU,WAAd,+BAGR,6BACJ,kBAACF,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAKE,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAC7B,6BACA,kBAAC5B,EAAD,CAASe,MAAM,sBAAsBE,KAAK,6CAA6CL,IAAKiB,OAG9F,kBAACN,EAAA,EAAD,CAAKE,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAC/B,6BACE,kBAAC5B,EAAD,CAASe,MAAM,iBAAiBE,KAAK,gDAAgDL,IAAKkB,OAG5F,kBAACP,EAAA,EAAD,CAAKE,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAC/B,6BACE,kBAAC5B,EAAD,CAASe,MAAM,gBAAgBE,KAAK,+CAA+CL,IAAKmB,QAG5F,6BACA,kBAACT,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAKE,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,MAC7B,6BACA,kBAAC5B,EAAD,CAASe,MAAM,oBAAoBE,KAAK,0CAA0CL,IAAKoB,QAI3F,8BChCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9eac6243.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/converter.cc95e53b.svg\";","module.exports = __webpack_public_path__ + \"static/media/bmi.19523405.svg\";","module.exports = __webpack_public_path__ + \"static/media/crypto.d19322d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/sattrack.9e3054d5.svg\";","import React from 'react';\r\nimport {Card,Button} from 'react-bootstrap';\r\n\r\nexport default function AppCard(props){\r\n\r\n    return(\r\n        <Card bg=\"dark\" style={{ width: '18rem',borderRadius:\"20px\",margin:\"auto\" }} text=\"warning\">\r\n                <Card.Img variant=\"top\" src={props.img} style={{width:\"70%\",margin:\"auto\"}} />\r\n                <Card.Body>\r\n                    <Card.Title>{props.title}</Card.Title>  \r\n                    <Button variant=\"success\" href={props.href} activeClassName=\"active\">RUN</Button>\r\n                </Card.Body>\r\n        </Card>\r\n    );\r\n}","import React from 'react';\r\nimport {Container,Row, Col} from 'react-bootstrap';\r\nimport AppCard from '../AppCard/AppCard';\r\nimport converterImg from './assets/converter.svg';\r\nimport bmiImg from './assets/bmi.svg';\r\nimport cryptoImg from './assets/crypto.svg';\r\nimport satImg from './assets/sattrack.svg';\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n    return(\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                    <h2 className=\"heading\">Welcome to CloudMark Home</h2>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n        <Row>\r\n\r\n          <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"4\" >\r\n            <br />\r\n            <AppCard title=\"Universal Converter\" href=\"https://the-redlord.github.io/converter/#/\" img={converterImg} />\r\n          </Col>\r\n\r\n          <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"4\">\r\n          <br/>\r\n            <AppCard title=\"BMI Calculator\" href=\"https://the-redlord.github.io/bmi_calc_react/\" img={bmiImg} />\r\n          </Col>\r\n\r\n          <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"4\">\r\n          <br/>\r\n            <AppCard title=\"Crypto Ticker\" href=\"https://the-redlord.github.io/crypto_ticker/\" img={cryptoImg} />\r\n          </Col>\r\n        </Row>\r\n        <br/>\r\n        <Row>\r\n\r\n          <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"12\" >\r\n            <br />\r\n            <AppCard title=\"Satellite Tracker\" href=\"https://the-redlord.github.io/satTrack/\" img={satImg} />\r\n          </Col>\r\n\r\n        </Row>\r\n        <br/>\r\n      </Container>\r\n    );\r\n  }\r\n  ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}